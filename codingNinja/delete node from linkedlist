#include <iostream>
using namespace std;
class Node {
public:
    int data;
    Node *next;
    Node() : data(0), next(nullptr) {}
    Node(int x) : data(x), next(nullptr) {}
    Node(int x, Node *next) : data(x), next(next) {}
};
Node* deleteNode(Node *head, int pos) {
    // If the list is empty, return nullptr
    if (head == nullptr) {
        return nullptr;
    }
    // If position is 0, delete the head
    if (pos == 0) {
        Node* newHead = head->next;
        delete head;
        return newHead;
    }
    Node* current = head;
    Node* prev = nullptr;
    int count = 0;
    // Traverse to the node at position pos
    while (current != nullptr && count < pos) {
        prev = current;
        current = current->next;
        count++;
    }
    // If position is out of bounds, return the original list
    if (current == nullptr) {
        return head;
    }
    // Delete the node at position pos
    prev->next = current->next;
    delete current;

    return head;
}
// Utility function to print the list
void printList(Node *head) {
    Node* temp = head;
    while (temp != nullptr) {
        cout << temp->data << " ";
        temp = temp->next;
    }
    cout << endl;
}

int main() {
    // Example usage
    Node* head = new Node(1, new Node(2, new Node(3, new Node(4, new Node(5)))));

    cout << "Original list: ";
    printList(head);

    int posToDelete = 2;
    head = deleteNode(head, posToDelete);

    cout << "List after deleting position " << posToDelete << ": ";
    printList(head);

    // Clean up the remaining nodes
    while (head != nullptr) {
        Node* temp = head;
        head = head->next;
        delete temp;
    }

    return 0;
}

